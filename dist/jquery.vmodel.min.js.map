{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/jquery.vmodel.init.js","webpack:///./src/jquery.vmodel.api.js","webpack:///./src/jquery.vmodel.version.js","webpack:///./src/jquery.vmodel.fn.js","webpack:///./src/jquery.vmodel.delete.js","webpack:///./src/jquery.vmodel.get.js","webpack:///./src/jquery.vmodel.history.js","webpack:///./src/jquery.vmodel.end.js","webpack:///./src/jquery.vmodel.create.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","prototype","hasOwnProperty","p","s","t","e","jQuery","vmodel","_version","_storage","$","api","history_box","this","endbox","action","data","remove_sign","str","substring","isallow_jqver","is_err_msg","version","fn","jquery","charAt","check_input_param","param","selector","model_name","isautoload","method","vmodel_param_match","p_1","p_2","p_3","p_4","type","obj_sort","obj","temp","each","key","val","sort","each_autoload","autoload_method_ary","is_trigger_all","status","function_name","is_trigger_autoload","fnameary","result","message","get_autoload_funame","ary","atype","autoload","res","console","log","create","delete","local","is_trigger_callback","allow","fun_struct","index","bool","push_endbox","Date","vname","timestamp","parse","getMilliseconds","exist_history_data","length","push","set_display_attr","target_obj","encode","JSON","stringify","root","attr","param_match","returnary","type_name","pary","listen","type_listen","vmodel_get_callback","iid","setInterval","clearInterval","history","info","end","end_p1","end_p2","storage","callback","id","iscallback","storage_name","msg_error","msg","model","define_autoload_struct","autoload_func","fun_name","ext_expend","extend","struct","put_storage","realobj","main"],"mappings":"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","file":"jquery.vmodel.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","(function ($) {\r\n\r\n    \r\n    //整體使用\r\n    $.vmodel = {\r\n        _version: '1.6.2',\r\n\r\n        // 實體化的存放倉儲，提供內部呼叫。\r\n        _storage: {}\r\n    };\r\n\r\n\r\n\r\n}( jQuery ));\r\n","(function ($) {\r\n\r\n    // 內部全域的輔助方法\r\n    $.vmodel.api = new function (){\r\n\r\n        var history_box = [];\r\n\r\n        // 執行結束紀錄盒\r\n        this.endbox = function (action, data){\r\n            if (action == \"set\"){\r\n                history_box = data;\r\n            }\r\n            else if (action == \"get\"){\r\n                return history_box;\r\n            }\r\n        }\r\n\r\n        // 若前兩個字元是定位符號，就自動去除\r\n        this.remove_sign = function (str){\r\n            return (str.substring(0, 2) == \"--\") ? str.substring(2) : str;\r\n        }\r\n\r\n        /**\r\n         * 是否通過該版 vmodel 所允許的 jQuery 版本\r\n         * @param   is_err_msg              顯示錯誤訊息 true | 確認是否 false \r\n         */\r\n        this.isallow_jqver = function (is_err_msg){\r\n\r\n            // 若要顯示錯誤訊息\r\n            if (is_err_msg == true) {\r\n                return 'Vmodel.js ' + $.vmodel.version() + ' 須要使用大於 jQuery 3.0.0 的版本';\r\n            }\r\n            // 判斷是否允許版本\r\n            else {\r\n                var jver = jQuery.fn.jquery.charAt(0);\r\n                return (jver == 3) ? true : false;\r\n            }\r\n        }\r\n\r\n        // 確認必填參數\r\n        this.check_input_param = function (param) {\r\n            if (!param.selector)                throw(\"須要指定選擇器\");\r\n            if (!param.model_name)              throw(\"須要替模型命名\");\r\n            if (param.isautoload === undefined) throw(\"須要指定是否啟用\");\r\n            if (!param.method)                  throw(\"須要指定方法\");\r\n        }\r\n\r\n        /**\r\n         * 組合成一個陣列回傳參數\r\n         * @return  [選擇器, 倉儲名稱, 是否啟用 autoload, 實體化物件]\r\n         */\r\n        this.vmodel_param_match = function (p_1, p_2, p_3, p_4){\r\n\r\n\r\n            var selector   = p_1;\r\n            \r\n            // 去除定位符號\r\n            var model_name = this.remove_sign(p_2);\r\n            \r\n            var isautoload = p_3;\r\n            \r\n            var method     = $.type(p_4) === \"object\" ? p_4 : new p_4();\r\n\r\n            return [selector, model_name, isautoload, method];\r\n        }\r\n\r\n        // 物件排序\r\n        this.obj_sort = function (obj){\r\n            var temp = [];\r\n            var i = 0;\r\n            \r\n            $.each(obj, function(key, val) {\r\n                temp[i++] = key;\r\n            });\r\n            \r\n            temp.sort();\r\n\r\n            var data = {};\r\n            $.each(temp, function (key, val){\r\n                data[val] = obj[val]\r\n            });\r\n\r\n            return data;\r\n        }\r\n\r\n        /**\r\n         * 批次呼叫可自動掛載的 function\r\n         * @param   autoload_method_ary     需要觸發的 function 名稱陣列\r\n         * @param   object                  也就是外部的實體化後的 $(selector).vmodel(\"匿名方法\")\r\n         */\r\n        this.each_autoload = function (autoload_method_ary, obj){\r\n\r\n            if (!autoload_method_ary) return false;\r\n\r\n            // 觸發狀態偵測盒\r\n            var is_trigger_all = {\r\n                status: true,\r\n                function_name: null\r\n            };\r\n\r\n            $.each(autoload_method_ary, function(key, name) {\r\n\r\n                // 若有找到方法\r\n                if ($.type(obj[name]) == \"function\") {\r\n                    // 觸發方法\r\n                    obj[name]();\r\n                    return true;\r\n                }\r\n\r\n                // 若沒有找到方法，那就中斷\r\n                is_trigger_all = {\r\n                    status: false,\r\n                    function_name: name\r\n                };\r\n\r\n                return false;\r\n            });\r\n\r\n            return is_trigger_all;\r\n        },\r\n\r\n        /**\r\n         * 若使用者有設定 autoload() 就會自動呼叫陣列中指定的方法\r\n         * @param obj      也就是外部的實體化後的 $(selector).vmodel(\"匿名方法\")\r\n         * @param fnameary 須要自動讀取的方法陣列\r\n         */\r\n        this.is_trigger_autoload = function (obj, fnameary){\r\n\r\n            var result = {\r\n                status: false,\r\n                message: null\r\n            }\r\n\r\n            try {\r\n                \r\n                if (!fnameary) {\r\n                    throw \"須要指定方法名稱陣列\";\r\n                }\r\n                \r\n                if ($.type(fnameary) != \"array\") {\r\n                    throw 'autoload 必須要是陣列';\r\n                }\r\n                \r\n                var result = $.vmodel.api.each_autoload(fnameary, obj);\r\n\r\n                if (result.status === true) return true;\r\n\r\n                throw  '找不到可以自動讀取的方法 ' + result.function_name + '()';\r\n\r\n                result.status = true;\r\n            }\r\n            catch(e) {\r\n                result = {\r\n                    status: false,\r\n                    message: e\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        // 從物件中取得 autoload 的方法陣列\r\n        this.get_autoload_funame = function (obj){\r\n            var ary   = [];\r\n            var atype = $.type(obj.autoload);\r\n            var result = {\r\n                status: true,\r\n                message: null,\r\n                data: null\r\n            }\r\n\r\n            try{\r\n                // 取得 autoload 的陣列\r\n                if (atype == \"array\") {\r\n                    ary = obj.autoload;\r\n                } \r\n                else if (atype == \"function\") {\r\n                \r\n                    // 若有回傳陣列才替換\r\n                    res = obj.autoload();\r\n                    if ($.type(res) == \"array\") {\r\n                        ary = res;\r\n                    }\r\n                    else {\r\n                        throw \"中 autoload 最終需要得到的型態務必是 Array。\";\r\n                    }\r\n                }\r\n\r\n                else {\r\n                    throw \"中 autoload 須要是陣列或 function。\";\r\n                }\r\n\r\n                result.data = ary;\r\n            }\r\n            catch(e) {\r\n                result.status = false;\r\n                result.message = e;\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n\r\n}( jQuery ));","// 呼叫版本名稱\r\n$.vmodel.version = function (){\r\n\r\n    return $.vmodel._version;\r\n\r\n}\r\n","(function ($) {\r\n\r\n    $.fn.vmodel = function (param){\r\n        if ($.type(param) !== \"object\") {\r\n            console.log(\"參數型態需要是 object\");\r\n            return false;\r\n        }\r\n        $.vmodel.create(param);\r\n    }\r\n\r\n}( jQuery ));","(function ($) {\r\n\r\n    /**\r\n     * 刪除指定的倉儲\r\n     * @param   model_name (選)倉儲名稱, 不指定會清空所有倉儲\r\n     */\r\n    $.vmodel.delete = function (model_name){\r\n        \r\n        if (!model_name && model_name != '') {\r\n            $.vmodel._storage = {};\r\n        } else {\r\n            if ($.vmodel._storage[model_name]) {\r\n                delete $.vmodel._storage[model_name];\r\n            }\r\n        }\r\n        \r\n        return this;\r\n    }\r\n\r\n}( jQuery ));","(function ($) {\r\n\r\n    /**\r\n     * 取得倉儲\r\n     * @param   string            model_name    (選) 倉儲的存放名稱。當為空時，返回所有倉儲\r\n     * @param   bool              p_2     (選) 預設 false, 是否觸發倉儲 autoload\r\n     * @param   function | bool   p_3     (選) 是否啟用監聽並添加視覺化屬性。\r\n     *                                         注意，這是非同步。\r\n     *                                         function :   監聽直到完成模組後會觸發 callback，並夾帶了該倉儲。\r\n     *                                         true :       true 僅啟用監聽。\r\n     *                                         \r\n     * @return  object\r\n     */\r\n    $.vmodel.get = function (model_name, p_2, p_3){\r\n\r\n        var local = this;\r\n\r\n        // 判斷是否可以觸發回調 callback，\r\n        // 條件式當所有狀態都是 true\r\n        this.is_trigger_callback = function (obj){\r\n\r\n            var allow = true;\r\n\r\n            $.each(obj.fun_struct, function(index, bool) {\r\n\r\n                // 如果遇到沒有初始化的，就終止檢查\r\n                if (bool == false) {\r\n                    allow = false;\r\n                    return false;\r\n                }\r\n\r\n            });\r\n\r\n            // 如果不允許就離開\r\n            // 若 autoload 中的方法都已經建構完成，那就可以呼叫回調 \r\n            return (allow == false) ? false : true;\r\n        }\r\n\r\n        // 添加到結束紀錄盒\r\n        this.push_endbox = function (model_name){\r\n            var d = new Date();\r\n\r\n            // 建立一個物件\r\n            var data = [{\r\n                vname: model_name, // 倉儲名稱\r\n                status: true, // 完成\r\n                timestamp : Date.parse(d) + \".\" + d.getMilliseconds(), //時間戳記\r\n            }];\r\n\r\n\r\n            var exist_history_data = $.vmodel.api.endbox(\"get\");\r\n\r\n            // 如果不是在結束紀錄盒中的第一個模組\r\n            if ($(exist_history_data).length > 0) {\r\n\r\n                // 合併已存在的，務必使用 data[0] 剝除外面的陣列。\r\n                exist_history_data.push(data[0]); \r\n                \r\n                // 替換\r\n                data = exist_history_data;\r\n            }\r\n\r\n            // 添加變數紀錄\r\n            $.vmodel.api.endbox(\"set\", data);\r\n\r\n            return data;\r\n        }\r\n\r\n        // 視覺化屬性\r\n        this.set_display_attr = function (target_obj, data){\r\n\r\n            var encode = JSON.stringify(data);\r\n            target_obj.root.attr(\"data-vmodel-history\", encode); \r\n        }\r\n\r\n        // 僅做對應參數的輔助\r\n        this.param_match = function (model_name, p_2, p_3) {\r\n            var returnary = [];\r\n            var type_name = $.type(model_name);\r\n\r\n            // 返回所有倉儲\r\n            if (!model_name) {\r\n                returnary = [model_name, null, null];\r\n            }\r\n            // 指定一個倉儲名稱\r\n            else if (type_name == \"string\") {\r\n                returnary = [model_name, p_2, p_3];\r\n            }\r\n\r\n            return returnary;\r\n        }\r\n\r\n        // 重新命名\r\n        var pary     = local.param_match(model_name, p_2, p_3);\r\n        var model_name     = pary[0];\r\n        var autoload = pary[1];\r\n        var listen   = pary[2];\r\n        pary = p_2 = p_3 = null;\r\n\r\n\r\n        // 返回所有倉儲\r\n        if (!model_name) {\r\n            return $.vmodel.api.obj_sort($.vmodel._storage);\r\n        }\r\n\r\n        var target_obj = $.vmodel._storage[model_name];\r\n        \r\n        // 呼叫的倉儲並不存在\r\n        if (!target_obj) {\r\n            console.log(\"呼叫的倉儲名稱 \"+ model_name +\" 不存在。\");\r\n            return false;\r\n        }\r\n\r\n        // 若參數2指定 bool 且為 true 的時候，會前往判斷，是否要觸發剛取得模組的 autoload()，若有就會優先觸發\r\n        if ($.type(autoload) == \"boolean\" && autoload == true) {\r\n\r\n            // 觸發 autoload()\r\n            var result = $.vmodel.api.get_autoload_funame(target_obj);\r\n            var fnameary = result.data;\r\n            \r\n            var result   = $.vmodel.api.is_trigger_autoload(target_obj, fnameary);\r\n\r\n            // 若有啟用監聽或回調函數\r\n            var type_listen = $.type(listen);\r\n            if (type_listen == \"function\" || (type_listen == \"boolean\" && listen == true)) {\r\n\r\n                // 若是回調\r\n                if (type_listen == \"function\") {\r\n                    // 必須先擴充到該模組底下，避免多個倉儲會互相干擾\r\n                    target_obj.vmodel_get_callback = function (){\r\n                        listen(target_obj);\r\n                    }\r\n                }\r\n\r\n\r\n                //監聽\r\n                var iid = setInterval(function (){\r\n\r\n                    // 若全部狀態尚未完成\r\n                    if (local.is_trigger_callback(target_obj) === false) return true;\r\n\r\n                    // 停止監聽\r\n                    clearInterval(iid);\r\n\r\n                    // 添加到結束紀錄盒\r\n                    var data = local.push_endbox(model_name)\r\n\r\n                    // 呈現在 html 屬性中\r\n                    local.set_display_attr(target_obj, data);\r\n\r\n                    // 觸發回調\r\n                    if (type_listen == \"boolean\") return true;\r\n                    \r\n                    target_obj.vmodel_get_callback();\r\n\r\n                }, 0);\r\n\r\n                return true\r\n            }\r\n        }\r\n\r\n        // 無論是否觸發使用者的 autoload(), 最後都會返回該實體化的物件\r\n        return $.vmodel._storage[model_name];\r\n    }\r\n\r\n}( jQuery ));","(function ($) {\r\n\r\n    /**\r\n     * 取得執行完成的歷史紀錄\r\n     * @param   model_name   倉儲名稱\r\n     * @return               result 物件\r\n     */\r\n    $.vmodel.history = function (model_name) {\r\n\r\n        var result = {\r\n            status: false,\r\n            data: null\r\n        };\r\n\r\n        // 從結束紀錄盒找到對應\r\n        var storage   = $.vmodel.get(model_name);\r\n        var endbox = $.vmodel.api.endbox(\"get\");\r\n        if ($(endbox).length === 0) return result;\r\n\r\n        // 搜尋\r\n        $.each(endbox, function (key, info){\r\n\r\n            // 比對不到就繼續比對下一個\r\n            if (info.vname != model_name) return true;\r\n\r\n            // 比對到了則修改狀態，並結束尋找\r\n            result.status = true;\r\n            result.data = info;\r\n\r\n            return false;\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n}( jQuery ));","(function ($) {\r\n\r\n    /**\r\n     * 當指定多組的倉儲模組化完成後，要觸發的方法\r\n     *\r\n     * 注意，這需要每個模組都使用監聽完成視覺化，也就是 $.vmodel.get() 第三個參數\r\n     * \r\n     * @param   array | function     end_p1       監聽指定要完成的倉儲名稱陣列 | 回調方法\r\n     * @param   function             end_p2       回調方法, 並夾帶已經完成的倉儲物件\r\n     */\r\n    $.vmodel.end = function (end_p1, end_p2){\r\n\r\n        var local = this;\r\n\r\n        var issuccess = true;\r\n\r\n        /**\r\n         * 組合成一個陣列回傳參數\r\n         * @param   end_p1 \r\n         * @param   end_p2 \r\n         * @return  [要監聽的倉儲物件, callback()]\r\n         */\r\n        this.param_match = function(end_p1, end_p2) {\r\n            var returnary = [];\r\n\r\n            // 只有一個參數，就取得所有倉儲\r\n            if ($.type(end_p1) == \"function\") {\r\n                var storage = $.vmodel.get();\r\n                returnary = [storage, end_p1];\r\n            }\r\n            // 兩個參數，代表有指定要取得的倉儲\r\n            else {\r\n\r\n                var obj = {};\r\n                $.each(end_p1, function(key, name) {\r\n                    obj[name] = $.vmodel.get(name);\r\n                });\r\n                returnary = [obj, end_p2];\r\n            }\r\n\r\n            return returnary;\r\n        }\r\n\r\n        //命名方便使用\r\n        var pary     = local.param_match(end_p1, end_p2);\r\n        var storage  = pary[0];\r\n        var callback = pary[1];\r\n        end_p1 = end_p2 = null;\r\n\r\n        var id = setInterval(function (){\r\n\r\n            var iscallback = true;\r\n\r\n            // 檢查每個倉儲的視覺化狀態\r\n            $.each(storage, function (storage_name, obj){\r\n\r\n                // 取得執行完成的歷史紀錄\r\n                var result = $.vmodel.history(obj.vname);\r\n\r\n                // 若遇到其中一個倉儲為 false 代表還沒有完成，那就直接中斷\r\n                if (result.status === false) {\r\n                    iscallback = false;\r\n                    return false;\r\n                }\r\n\r\n                iscallback = true;\r\n            });\r\n\r\n\r\n            if (iscallback) {\r\n                callback(storage);\r\n                clearInterval(id);\r\n            }\r\n\r\n\r\n        }, 0);\r\n        \r\n    }\r\n\r\n}( jQuery ));","(function ($) {\r\n\r\n    $.vmodel.create = function (param){\r\n        \r\n        // 內部\r\n        var local   = this;\r\n\r\n        // 選擇器\r\n        var selector = param.selector;\r\n        \r\n        /**\r\n         * 錯誤訊息\r\n         * @param   method_name 提示錯誤的 function 名稱\r\n         * @param   msg         錯誤訊息    \r\n         */\r\n        this.msg_error = function (msg){\r\n            console.log(\"錯誤！\" + param.model + ' ' + msg);\r\n        }\r\n\r\n\r\n        // 初始化使用者指定的 autoload 每個方法的建構狀態\r\n        this.define_autoload_struct = function (obj, autoload_func){\r\n            // 為每一個方法，都設定為 false，代表該方法還沒有建構完成\r\n            $.each(autoload_func, function(index, fun_name) {\r\n                obj.fun_struct[fun_name] = false;\r\n            });\r\n        }\r\n\r\n        // 外部擴充方法\r\n        this.ext_expend = function (obj, model_name){\r\n            var vname = (model_name != null) ? model_name : null;\r\n            $.extend(obj, {\r\n\r\n                vname : vname,\r\n\r\n                // 根選擇器\r\n                selector : selector,        \r\n\r\n                // 根選擇器物件    \r\n                root : $(selector),\r\n\r\n                // 在倉儲中建立一個 fun_struct 物件\r\n                // 用來存放每個 autoload 的方法名稱，\r\n                // 並預設建構狀態為 false, 等到使用者手動為 true，\r\n                // 才代表這個方法完成建構。\r\n                fun_struct : {},\r\n\r\n                /**\r\n                 * 提供外部指定倉儲的模組化狀態。\r\n                 * @param   model_name   autoload 指定的陣列倉儲名稱。可以是單一名稱會陣列。\r\n                 *                 如 \"say\" 或 ['say', 'hello']\r\n                 * @param   bool   (選) true:(預設)完成 | false : 未完成\r\n                 */\r\n                struct : function (model_name, status) {\r\n\r\n                    if ($.type(status) != \"boolean\" && !status) {\r\n                        status = true;\r\n                    }\r\n\r\n\r\n                    // 若使用字串\r\n                    if ($.type(model_name) == \"string\") {\r\n                        if ($.type(obj.fun_struct[model_name]) != \"boolean\") {\r\n                            local.msg_error('找不到名稱為 ' + model_name + '的建構狀態');\r\n                            return false;\r\n                        }\r\n\r\n                        // 設定指定狀態\r\n                        obj.fun_struct[model_name] = status;\r\n                    }\r\n\r\n                    // 若是陣列如 ['say', 'hello']\r\n                    else if ($.type(model_name) == \"array\"){\r\n                        $.each(model_name, function (key, val){\r\n                            obj.fun_struct[val] = status;\r\n                        })\r\n                    }\r\n                    else {\r\n                        local.msg_error('建構名稱須要指定');\r\n                        return false;\r\n                    }\r\n\r\n                    return true;\r\n                }\r\n            });\r\n            return obj;\r\n        }\r\n\r\n        // 放入倉儲\r\n        this.put_storage = function (model_name, realobj){\r\n\r\n            if (model_name != null) {\r\n\r\n                // 檢查是否已存在\r\n                if (!$.vmodel._storage[model_name]) {\r\n                    $.vmodel._storage[model_name] = realobj;\r\n                }\r\n                else {\r\n                    local.msg_error(\"倉儲名稱已被使用。\");\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        this.main = function (param){\r\n\r\n            // 判斷 jQ 版本是否允許\r\n            if (!$.vmodel.api.isallow_jqver(false)) throw ($.vmodel.api.isallow_jqver(true));\r\n\r\n            // 確認必填參數\r\n            $.vmodel.api.check_input_param({\r\n                selector : param.selector, \r\n                model_name : param.model, \r\n                isautoload : param.isautoload, \r\n                method : param.method\r\n            });\r\n\r\n            // 參數對應\r\n            var pary       = $.vmodel.api.vmodel_param_match(param.selector, param.model, param.isautoload, param.method);\r\n            var selector   = pary[0];\r\n            var model_name = pary[1]; \r\n            var isautoload = pary[2]; \r\n            var realobj    = pary[3];\r\n\r\n            // 擴充，外部不可使用這些關鍵字\r\n            var realobj    = local.ext_expend(realobj, model_name);\r\n            \r\n            // 取得 autoload 的方法陣列\r\n            var result = $.vmodel.api.get_autoload_funame(realobj);\r\n            if (result.status === false) {\r\n                local.msg_error(result.message);\r\n                return false;\r\n            }\r\n\r\n            var fnameary = result.data;\r\n\r\n            // 先定義建構狀態\r\n            local.define_autoload_struct(realobj, fnameary);\r\n\r\n            // 放入倉儲\r\n            var result = local.put_storage(model_name, realobj);\r\n            if (result === false) return false;\r\n\r\n            // 最後才觸發 autoload 。\r\n            // 這是因為當前的物件，才能被任何倉儲裡的方法取得。\r\n            // 例如自己呼叫自己。\r\n            if (isautoload === true) {\r\n\r\n                var result = $.vmodel.api.is_trigger_autoload(realobj, fnameary);\r\n\r\n                if (result.status === false) {\r\n                    local.msg_error(result.message);\r\n                    return false;\r\n                }\r\n            }\r\n            \r\n            return this;\r\n        }\r\n\r\n        // 返回實體化的，可供外部調用\r\n        return local.main(param);\r\n    }\r\n    \r\n\r\n}( jQuery ));"],"sourceRoot":""}
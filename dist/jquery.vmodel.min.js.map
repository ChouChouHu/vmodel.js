{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/jquery.vmodel.js","webpack:///./src/jquery.vmodel-api.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","prototype","hasOwnProperty","p","s","t","e","$","storage","jQuery","vmodel","api","this","remove_sign","str","substring","isallow_jqver","is_err_msg","version","fn","jquery","charAt","check_input_param","param","selector","model_name","isautoload","method","vmodel_param_match","p_1","p_2","p_3","p_4","type","obj_sort","obj","temp","each","key","val","sort","data","each_autoload","autoload_method_ary","local","msg_error","is_trigger_autoload","fnameary","console","log","get_autoload_funame","ary","atype","autoload","vname","res","end","end_p1","end_p2","param_match","returnary","pary","callback","id","setInterval","iscallback","storage_name","history","clearInterval","returnval","json","root","attr","parseJSON","info","chk_trigger_callback","allow","fun_struct","index","bool","display_attr","target_obj","Date","status","timestamp","parse","getMilliseconds","dej","push","encode","JSON","stringify","type_name","listen","type_listen","vmodel_get_callback","iid","delete","create","method_name","msg","define_autoload_struct","autoload_func","fun_name","ext_expend","extend","struct","put_storage","realobj","main","model","err"],"mappings":"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","file":"jquery.vmodel.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","(function ($) {\r\n\r\n    var version = \"1.6.2\";\r\n\r\n    // 實體化的存放倉儲，提供內部呼叫。\r\n    var storage = {}; \r\n\r\n    //整體使用\r\n    $.vmodel = {};\r\n\r\n\r\n    \r\n    // 內部全域的輔助方法\r\n    $.vmodel.api = new function (){\r\n\r\n        // 若前兩個字元是定位符號，就自動去除\r\n        this.remove_sign = function (str){\r\n            return (str.substring(0, 2) == \"--\") ? str.substring(2) : str;\r\n        }\r\n\r\n        /**\r\n         * 是否通過該版 vmodel 所允許的 jQuery 版本\r\n         * @param   is_err_msg              顯示錯誤訊息 true | 確認是否 false \r\n         */\r\n        this.isallow_jqver = function (is_err_msg){\r\n\r\n            // 若要顯示錯誤訊息\r\n            if (is_err_msg == true) {\r\n                return 'Vmodel.js ' + $.vmodel.version() + ' 須要使用大於 jQuery 3.0.0 的版本';\r\n            }\r\n            // 判斷是否允許版本\r\n            else {\r\n                var jver = jQuery.fn.jquery.charAt(0);\r\n                return (jver == 3) ? true : false;\r\n            }\r\n        }\r\n\r\n        // 確認必填參數\r\n        this.check_input_param = function (param) {\r\n            if (!param.selector)                throw(\"須要指定選擇器\");\r\n            if (!param.model_name)              throw(\"須要替模型命名\");\r\n            if (param.isautoload === undefined) throw(\"須要指定是否啟用\");\r\n            if (!param.method)                  throw(\"須要指定方法\");\r\n        }\r\n\r\n        /**\r\n         * 組合成一個陣列回傳參數\r\n         * @return  [選擇器, 倉儲名稱, 是否啟用 autoload, 實體化物件]\r\n         */\r\n        this.vmodel_param_match = function (p_1, p_2, p_3, p_4){\r\n\r\n\r\n            var selector   = p_1;\r\n            \r\n            // 去除定位符號\r\n            var model_name = this.remove_sign(p_2);\r\n            \r\n            var isautoload = p_3;\r\n            \r\n            var method     = $.type(p_4) === \"object\" ? p_4 : new p_4();\r\n\r\n            return [selector, model_name, isautoload, method];\r\n        }\r\n\r\n        // 物件排序\r\n        this.obj_sort = function (obj){\r\n            var temp = [];\r\n            var i = 0;\r\n            \r\n            $.each(obj, function(key, val) {\r\n                temp[i++] = key;\r\n            });\r\n            \r\n            temp.sort();\r\n\r\n            var data = {};\r\n            $.each(temp, function (key, val){\r\n                data[val] = obj[val]\r\n            });\r\n\r\n            return data;\r\n        }\r\n\r\n        /**\r\n         * 批次呼叫可自動掛載的 function\r\n         * @param   autoload_method_ary     需要觸發的 function 名稱陣列\r\n         * @param   object                  也就是外部的實體化後的 $(selector).vmodel(\"匿名方法\")\r\n         */\r\n        this.each_autoload = function (autoload_method_ary, obj){\r\n\r\n            if (!autoload_method_ary) return false;\r\n\r\n            $.each(autoload_method_ary, function(key, name) {\r\n\r\n                if ($.type(obj[name]) != \"function\") {\r\n                    local.msg_error(name, \"不存在。\");\r\n                    return false;\r\n                }\r\n\r\n                // 觸發方法\r\n                obj[name]();\r\n            });\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * 若使用者有設定 autoload() 就會自動呼叫陣列中指定的方法\r\n         * @param obj      也就是外部的實體化後的 $(selector).vmodel(\"匿名方法\")\r\n         * @param fnameary 須要自動讀取的方法陣列\r\n         */\r\n        this.is_trigger_autoload = function (obj, fnameary){\r\n\r\n            try {\r\n                if (!fnameary) {\r\n                    throw \"須要指定方法名稱陣列\";\r\n                }\r\n                if ($.type(fnameary) != \"array\") {\r\n                    throw 'is_trigger_autoload() 代入的方法名稱必須要是陣列';\r\n                }\r\n                var result = $.vmodel.api.each_autoload(fnameary, obj);\r\n                return true;\r\n            }\r\n            catch(e) {\r\n                console.log(e);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // 從物件中取得 autoload 的方法陣列\r\n        this.get_autoload_funame = function (obj){\r\n            var ary   = [];\r\n            var atype = $.type(obj.autoload);\r\n\r\n            try{\r\n                // 取得 autoload 的陣列\r\n                if (atype == \"array\") {\r\n                    ary = obj.autoload;\r\n                } \r\n                else if (atype == \"function\") {\r\n                \r\n                    // 若有回傳陣列才替換\r\n                    res = obj.autoload();\r\n                    if ($.type(res) == \"array\") {\r\n                        ary = res;\r\n                    }\r\n                    else {\r\n                        throw obj.vname + \" 的 get_autoload_funame() 最終需要得到的型態應該是陣列。\";\r\n                    }\r\n                }\r\n\r\n                else {\r\n                    throw obj.vname + \" 的 autoload 須要是陣列或 function。\";\r\n                }\r\n\r\n                return ary;\r\n            }\r\n            catch(e) {\r\n                console.log(e);\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    // 呼叫版本名稱\r\n    $.vmodel.version = function (){\r\n\r\n        return version;\r\n\r\n    }\r\n\r\n    \r\n    /**\r\n     * 當指定多組的倉儲模組化完成後，要觸發的方法\r\n     *\r\n     * 注意，這需要每個模組都使用監聽完成視覺化，也就是 $.vmodel.get() 第三個參數\r\n     * \r\n     * @param   array | function     end_p1       監聽指定要完成的倉儲名稱陣列 | 回調方法\r\n     * @param   function             end_p2       回調方法, 並夾帶已經完成的倉儲物件\r\n     */\r\n    $.vmodel.end = function (end_p1, end_p2){\r\n\r\n        var local = this;\r\n\r\n        var issuccess = true;\r\n\r\n        /**\r\n         * 組合成一個陣列回傳參數\r\n         * @param   end_p1 \r\n         * @param   end_p2 \r\n         * @return  [要監聽的倉儲物件, callback()]\r\n         */\r\n        this.param_match = function(end_p1, end_p2) {\r\n            var returnary = [];\r\n\r\n            // 只有一個參數，就取得所有倉儲\r\n            if ($.type(end_p1) == \"function\") {\r\n                var storage = $.vmodel.get();\r\n                returnary = [storage, end_p1];\r\n            }\r\n            // 兩個參數，代表有指定要取得的倉儲\r\n            else {\r\n\r\n                var obj = {};\r\n                $.each(end_p1, function(key, name) {\r\n                    obj[name] = $.vmodel.get(name);\r\n                });\r\n                returnary = [obj, end_p2];\r\n            }\r\n\r\n            return returnary;\r\n        }\r\n\r\n        //命名方便使用\r\n        var pary     = local.param_match(end_p1, end_p2);\r\n        var storage  = pary[0];\r\n        var callback = pary[1];\r\n        end_p1 = end_p2 = null;\r\n\r\n        var id = setInterval(function (){\r\n\r\n            var iscallback = true;\r\n\r\n            // 檢查每個倉儲的視覺化狀態\r\n            $.each(storage, function (storage_name, obj){\r\n\r\n                var history = $.vmodel.history(obj.vname);\r\n\r\n                // false 代表還沒有完成，那就檢查下一個倉儲，且不觸發 callback\r\n                if (history == false) {\r\n                    iscallback = false;\r\n                    return true;\r\n                }\r\n\r\n                iscallback = true;\r\n            });\r\n\r\n\r\n            if (iscallback) {\r\n                callback(storage);\r\n                clearInterval(id);\r\n            }\r\n\r\n\r\n        }, 0);\r\n        \r\n    }\r\n\r\n\r\n    /**\r\n     * 取得視覺化屬性紀錄\r\n     * @param   model_name         倉儲名稱\r\n     * @return               有找到會返回視覺化的屬性物件；反之為 false\r\n     */\r\n    $.vmodel.history = function (model_name) {\r\n\r\n        var returnval = false;\r\n\r\n        // 找到綁在跟目錄的視覺化屬性\r\n        var storage   = $.vmodel.get(model_name);\r\n        var json      = storage.root.attr(\"data-vmodel-history\");\r\n        if (!json) return false;\r\n        var obj       = $.parseJSON(json);\r\n\r\n        // 搜尋\r\n        $.each(obj, function (key, info){\r\n            if (info.vname != model_name) return true;\r\n            returnval = info;\r\n            return false;\r\n        });\r\n\r\n        return returnval;\r\n    }\r\n\r\n\r\n    /**\r\n     * 取得倉儲\r\n     * @param   string            model_name    (選) 倉儲的存放名稱。當為空時，返回所有倉儲\r\n     * @param   bool              p_2     (選) 預設 false, 是否觸發倉儲 autoload\r\n     * @param   function | bool   p_3     (選) 是否啟用監聽並添加視覺化屬性。\r\n     *                                         注意，這是非同步。\r\n     *                                         function :   監聽直到完成模組後會觸發 callback，並夾帶了該倉儲。\r\n     *                                         true :       true 僅啟用監聽。\r\n     *                                         \r\n     * @return  object\r\n     */\r\n    $.vmodel.get = function (model_name, p_2, p_3){\r\n\r\n        var local = this;\r\n\r\n        // 判斷是否可以觸發回調 callback，\r\n        // 條件式當所有狀態都是 true\r\n        this.chk_trigger_callback = function (obj){\r\n\r\n            var allow = true;\r\n\r\n            $.each(obj.fun_struct, function(index, bool) {\r\n\r\n                // 如果遇到沒有初始化的，就終止檢查\r\n                if (bool == false) {\r\n                    allow = false;\r\n                    return false;\r\n                }\r\n\r\n            });\r\n\r\n            // 如果不允許就離開\r\n            // 若 autoload 中的方法都已經建構完成，那就可以呼叫回調 \r\n            return (allow == false) ? false : true;\r\n        }\r\n\r\n\r\n        // 視覺化屬性\r\n        this.display_attr = function (model_name, target_obj){\r\n\r\n            var d = new Date();\r\n\r\n            // 建立一個物件\r\n            var data = [{\r\n                vname: model_name, // 倉儲名稱\r\n                status: true, // 完成\r\n                timestamp : Date.parse(d) + \".\" + d.getMilliseconds(), //時間戳記\r\n            }];\r\n\r\n\r\n            // 視覺狀態是否存在, 若存在代表已經有倉儲也是綁定在這個元素，而且已完成。\r\n            // 這時候就合併已存在的，與新的。\r\n            var attr = target_obj.root.attr(\"data-vmodel-history\");\r\n            if (attr) {\r\n                var dej = $.parseJSON(attr);\r\n                dej.push(data[0]); // 務必使用 data[0] 剝除外面的陣列。\r\n                data = dej;\r\n            }\r\n\r\n\r\n            //視覺狀態\r\n            var encode = JSON.stringify(data);\r\n            target_obj.root.attr(\"data-vmodel-history\", encode); \r\n        }\r\n\r\n        // 僅做對應參數的輔助\r\n        this.param_match = function (model_name, p_2, p_3) {\r\n            var returnary = [];\r\n            var type_name = $.type(model_name);\r\n\r\n            // 返回所有倉儲\r\n            if (!model_name) {\r\n                returnary = [model_name, null, null];\r\n            }\r\n            // 指定一個倉儲名稱\r\n            else if (type_name == \"string\") {\r\n                returnary = [model_name, p_2, p_3];\r\n            }\r\n\r\n            return returnary;\r\n        }\r\n\r\n        // 重新命名\r\n        var pary     = local.param_match(model_name, p_2, p_3);\r\n        var model_name     = pary[0];\r\n        var autoload = pary[1];\r\n        var listen   = pary[2];\r\n        pary = p_2 = p_3 = null;\r\n\r\n\r\n        // 返回所有倉儲\r\n        if (!model_name) {\r\n            return $.vmodel.api.obj_sort(storage);\r\n        }\r\n\r\n        var target_obj = storage[model_name];\r\n        \r\n        // 呼叫的倉儲並不存在\r\n        if (!target_obj) {\r\n            console.log(\"呼叫的倉儲名稱 \"+ model_name +\" 不存在。\");\r\n            return false;\r\n        }\r\n\r\n        // 若參數2指定 bool 且為 true 的時候，會前往判斷，是否要觸發剛取得模組的 autoload()，若有就會優先觸發\r\n        if ($.type(autoload) == \"boolean\" && autoload == true) {\r\n\r\n            // 觸發 autoload()\r\n            var fnameary = $.vmodel.api.get_autoload_funame(target_obj);\r\n            var result   = $.vmodel.api.is_trigger_autoload(target_obj, fnameary);\r\n            // console.log(result); // for debugs\r\n\r\n            // 若有啟用監聽或回調函數\r\n            var type_listen = $.type(listen);\r\n            if (type_listen == \"function\" || (type_listen == \"boolean\" && listen == true)) {\r\n\r\n                // 若是回調\r\n                if (type_listen == \"function\") {\r\n                    // 必須先擴充到該模組底下，避免多個倉儲會互相干擾\r\n                    target_obj.vmodel_get_callback = function (){\r\n                        listen(target_obj);\r\n                    }\r\n                }\r\n\r\n\r\n                //監聽\r\n                var iid = setInterval(function (){\r\n\r\n                    // 若全部狀態都完成\r\n                    if (local.chk_trigger_callback(target_obj) == true) {\r\n                        clearInterval(iid);\r\n\r\n                        // 視覺化添加屬性\r\n                        local.display_attr(model_name, target_obj);\r\n\r\n                        // 觸發回調\r\n                        if (type_listen == \"boolean\") return true;\r\n                        target_obj.vmodel_get_callback();\r\n                    }\r\n\r\n                }, 20);\r\n\r\n                return true\r\n            }\r\n        }\r\n\r\n        // 無論是否觸發使用者的 autoload(), 最後都會返回該實體化的物件\r\n        return storage[model_name];\r\n    }\r\n\r\n    /**\r\n     * 刪除指定的倉儲\r\n     * @param   model_name (選)倉儲名稱, 不指定會清空所有倉儲\r\n     */\r\n    $.vmodel.delete = function (model_name){\r\n        \r\n        if (!model_name && model_name != '') {\r\n            storage = {};\r\n        } else {\r\n            if (storage[model_name]) {\r\n                delete storage[model_name];\r\n            }\r\n        }\r\n        \r\n        return this;\r\n    }\r\n\r\n    $.vmodel.create = function (param){\r\n        \r\n        // 內部\r\n        var local   = this;\r\n\r\n        // 選擇器\r\n        var selector = param.selector;\r\n        \r\n        /**\r\n         * 錯誤訊息\r\n         * @param   method_name 提示錯誤的 function 名稱\r\n         * @param   msg         錯誤訊息    \r\n         */\r\n        this.msg_error = function (method_name, msg){\r\n\r\n            console.log(\"錯誤：『\" + selector + \"』呼叫的 function 『\" + method_name + \"』：\" + msg);\r\n        \r\n        }\r\n\r\n\r\n        // 初始化使用者指定的 autoload 每個方法的建構狀態\r\n        this.define_autoload_struct = function (obj, autoload_func){\r\n            // 為每一個方法，都設定為 false，代表該方法還沒有建構完成\r\n            $.each(autoload_func, function(index, fun_name) {\r\n                obj.fun_struct[fun_name] = false;\r\n            });\r\n        }\r\n\r\n        // 外部擴充方法\r\n        this.ext_expend = function (obj, model_name){\r\n            var vname = (model_name != null) ? model_name : null;\r\n            $.extend(obj, {\r\n\r\n                vname : vname,\r\n\r\n                // 根選擇器\r\n                selector : selector,        \r\n\r\n                // 根選擇器物件    \r\n                root : $(selector),\r\n\r\n                // 在倉儲中建立一個 fun_struct 物件\r\n                // 用來存放每個 autoload 的方法名稱，\r\n                // 並預設建構狀態為 false, 等到使用者手動為 true，\r\n                // 才代表這個方法完成建構。\r\n                fun_struct : {},\r\n\r\n                /**\r\n                 * 提供外部指定倉儲的模組化狀態。\r\n                 * @param   model_name   autoload 指定的陣列倉儲名稱。可以是單一名稱會陣列。\r\n                 *                 如 \"say\" 或 ['say', 'hello']\r\n                 * @param   bool   (選) true:(預設)完成 | false : 未完成\r\n                 */\r\n                struct : function (model_name, status) {\r\n\r\n                    if ($.type(status) != \"boolean\" && !status) {\r\n                        status = true;\r\n                    }\r\n\r\n\r\n                    // 若使用字串\r\n                    if ($.type(model_name) == \"string\") {\r\n                        if ($.type(obj.fun_struct[model_name]) != \"boolean\") {\r\n                            console.log('找不到名稱為 ' + model_name + '的建構狀態');\r\n                            return false;\r\n                        }\r\n\r\n                        // 設定指定狀態\r\n                        obj.fun_struct[model_name] = status;\r\n                    }\r\n\r\n                    // 若是陣列如 ['say', 'hello']\r\n                    else if ($.type(model_name) == \"array\"){\r\n                        $.each(model_name, function (key, val){\r\n                            obj.fun_struct[val] = status;\r\n                        })\r\n                    }\r\n                    else {\r\n                        console.log('建構名稱須要指定');\r\n                        return false;\r\n                    }\r\n\r\n                    return true;\r\n                }\r\n            });\r\n            return obj;\r\n        }\r\n\r\n        // 放入倉儲\r\n        this.put_storage = function (model_name, realobj){\r\n\r\n            if (model_name != null) {\r\n\r\n                // 檢查是否已存在\r\n                if (!storage[model_name]) {\r\n                    storage[model_name] = realobj;\r\n                }\r\n                else {\r\n                    console.log(\"倉儲名稱『\" + model_name + \"』重複。\");\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.main = function (param){\r\n\r\n            try {\r\n\r\n                // 判斷 jQ 版本是否允許\r\n                if (!$.vmodel.api.isallow_jqver(false)) throw ($.vmodel.api.isallow_jqver(true));\r\n\r\n                // 確認必填參數\r\n                $.vmodel.api.check_input_param({\r\n                    selector : param.selector, \r\n                    model_name : param.model, \r\n                    isautoload : param.isautoload, \r\n                    method : param.method\r\n                });\r\n\r\n                // 參數對應\r\n                var pary       = $.vmodel.api.vmodel_param_match(param.selector, param.model, param.isautoload, param.method);\r\n                var selector   = pary[0];\r\n                var model_name = pary[1]; \r\n                var isautoload = pary[2]; \r\n                var realobj    = pary[3];\r\n\r\n                // 擴充，外部不可使用這些關鍵字\r\n                var realobj    = local.ext_expend(realobj, model_name);\r\n                \r\n                // 取得 autoload 的方法陣列\r\n                var fnameary = $.vmodel.api.get_autoload_funame(realobj);\r\n                \r\n\r\n                // 先定義建構狀態\r\n                local.define_autoload_struct(realobj, fnameary);\r\n\r\n                // 放入倉儲\r\n                local.put_storage(model_name, realobj);\r\n\r\n                // 最後才觸發 autoload 。\r\n                // 這是因為當前的物件，才能被任何倉儲裡的方法取得。\r\n                // 例如自己呼叫自己。\r\n                if (isautoload === true) {\r\n                    var result = $.vmodel.api.is_trigger_autoload(realobj, fnameary);\r\n                    if (result === false) local.msg_error(\"is_trigger_autoload\", \"發生錯誤\");\r\n                }\r\n                \r\n                return this;\r\n            }\r\n            catch(err) {\r\n                console.log(err);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // 返回實體化的，可供外部調用\r\n        return local.main(param);\r\n    }\r\n\r\n\r\n\r\n    $.fn.vmodel = function (param){\r\n        if ($.type(param) !== \"object\") {\r\n            console.log(\"參數型態需要是 object\");\r\n            return false;\r\n        }\r\n        $.vmodel.create(param);\r\n    }\r\n\r\n\r\n}( jQuery ));","(function ($) {\r\n\r\n   \r\n\r\n}( jQuery ));"],"sourceRoot":""}
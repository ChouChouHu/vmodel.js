{"version":3,"sources":["jquery.vmodel.js"],"names":["$","version","storage","vmodel","api","this","remove_sign","str","substring","isallow_jqver","is_err_msg","jver","jQuery","fn","jquery","charAt","check_input_param","param","selector","model_name","undefined","isautoload","method","vmodel_param_match","p_1","p_2","p_3","p_4","type","obj_sort","obj","temp","i","each","key","val","sort","data","each_autoload","autoload_method_ary","name","local","msg_error","is_trigger_autoload","fnameary","e","console","log","get_autoload_funame","ary","atype","autoload","vname","res","end","end_p1","end_p2","param_match","returnary","get","pary","callback","id","setInterval","iscallback","storage_name","history","clearInterval","returnval","json","root","attr","parseJSON","info","chk_trigger_callback","allow","fun_struct","index","bool","display_attr","target_obj","d","Date","status","timestamp","parse","getMilliseconds","dej","push","encode","JSON","stringify","type_name","listen","type_listen","vmodel_get_callback","iid","create","method_name","msg","define_autoload_struct","autoload_func","fun_name","ext_expend","extend","struct","put_storage","realobj","main","model","result","err"],"mappings":"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","file":"jquery.vmodel.min.js","sourcesContent":["(function ($) {\r\n\r\n    var version = \"1.6.0\";\r\n\r\n    // 實體化的存放倉儲，提供內部呼叫。\r\n    var storage = {}; \r\n\r\n    //整體使用\r\n    $.vmodel = {};\r\n\r\n\r\n    \r\n    // 內部全域的輔助方法\r\n    $.vmodel.api = new function (){\r\n\r\n        // 若前兩個字元是定位符號，就自動去除\r\n        this.remove_sign = function (str){\r\n            return (str.substring(0, 2) == \"--\") ? str.substring(2) : str;\r\n        }\r\n\r\n        /**\r\n         * 是否通過該版 vmodel 所允許的 jQuery 版本\r\n         * @param   is_err_msg              顯示錯誤訊息 true | 確認是否 false \r\n         */\r\n        this.isallow_jqver = function (is_err_msg){\r\n\r\n            // 若要顯示錯誤訊息\r\n            if (is_err_msg == true) {\r\n                return 'Vmodel.js ' + $.vmodel.version() + ' 須要使用大於 jQuery 3.0.0 的版本';\r\n            }\r\n            // 判斷是否允許版本\r\n            else {\r\n                var jver = jQuery.fn.jquery.charAt(0);\r\n                return (jver == 3) ? true : false;\r\n            }\r\n        }\r\n\r\n        // 確認必填參數\r\n        this.check_input_param = function (param) {\r\n            if (!param.selector)                throw(\"須要指定選擇器\");\r\n            if (!param.model_name)              throw(\"須要替模型命名\");\r\n            if (param.isautoload === undefined) throw(\"須要指定是否啟用\");\r\n            if (!param.method)                  throw(\"須要指定方法\");\r\n        }\r\n\r\n        /**\r\n         * 組合成一個陣列回傳參數\r\n         * @return  [選擇器, 倉儲名稱, 是否啟用 autoload, 實體化物件]\r\n         */\r\n        this.vmodel_param_match = function (p_1, p_2, p_3, p_4){\r\n\r\n\r\n            var selector   = p_1;\r\n            \r\n            // 去除定位符號\r\n            var model_name = this.remove_sign(p_2);\r\n            \r\n            var isautoload = p_3;\r\n            \r\n            var method     = $.type(p_4) === \"object\" ? p_4 : new p_4();\r\n\r\n            return [selector, model_name, isautoload, method];\r\n        }\r\n\r\n        // 物件排序\r\n        this.obj_sort = function (obj){\r\n            var temp = [];\r\n            var i = 0;\r\n            \r\n            $.each(obj, function(key, val) {\r\n                temp[i++] = key;\r\n            });\r\n            \r\n            temp.sort();\r\n\r\n            var data = {};\r\n            $.each(temp, function (key, val){\r\n                data[val] = obj[val]\r\n            });\r\n\r\n            return data;\r\n        }\r\n\r\n        /**\r\n         * 批次呼叫可自動掛載的 function\r\n         * @param   autoload_method_ary     需要觸發的 function 名稱陣列\r\n         * @param   object                  也就是外部的實體化後的 $(selector).vmodel(\"匿名方法\")\r\n         */\r\n        this.each_autoload = function (autoload_method_ary, obj){\r\n\r\n            if (!autoload_method_ary) return false;\r\n\r\n            $.each(autoload_method_ary, function(key, name) {\r\n\r\n                if ($.type(obj[name]) != \"function\") {\r\n                    local.msg_error(name, \"不存在。\");\r\n                    return false;\r\n                }\r\n\r\n                // 觸發方法\r\n                obj[name]();\r\n            });\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * 若使用者有設定 autoload() 就會自動呼叫陣列中指定的方法\r\n         * @param obj      也就是外部的實體化後的 $(selector).vmodel(\"匿名方法\")\r\n         * @param fnameary 須要自動讀取的方法陣列\r\n         */\r\n        this.is_trigger_autoload = function (obj, fnameary){\r\n\r\n            try {\r\n                if (!fnameary) {\r\n                    throw \"須要指定方法名稱陣列\";\r\n                }\r\n                if ($.type(fnameary) != \"array\") {\r\n                    throw 'is_trigger_autoload() 代入的方法名稱必須要是陣列';\r\n                }\r\n                var result = $.vmodel.api.each_autoload(fnameary, obj);\r\n                return true;\r\n            }\r\n            catch(e) {\r\n                console.log(e);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // 從物件中取得 autoload 的方法陣列\r\n        this.get_autoload_funame = function (obj){\r\n            var ary   = [];\r\n            var atype = $.type(obj.autoload);\r\n\r\n            try{\r\n                // 取得 autoload 的陣列\r\n                if (atype == \"array\") {\r\n                    ary = obj.autoload;\r\n                } \r\n                else if (atype == \"function\") {\r\n                \r\n                    // 若有回傳陣列才替換\r\n                    res = obj.autoload();\r\n                    if ($.type(res) == \"array\") {\r\n                        ary = res;\r\n                    }\r\n                    else {\r\n                        throw obj.vname + \" 的 get_autoload_funame() 最終需要得到的型態應該是陣列。\";\r\n                    }\r\n                }\r\n\r\n                else {\r\n                    throw obj.vname + \" 的 autoload 須要是陣列或 function。\";\r\n                }\r\n\r\n                return ary;\r\n            }\r\n            catch(e) {\r\n                console.log(e);\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    // 呼叫版本名稱\r\n    $.vmodel.version = function (){\r\n\r\n        return version;\r\n\r\n    }\r\n\r\n    \r\n    /**\r\n     * 當指定多組的倉儲模組化完成後，要觸發的方法\r\n     *\r\n     * 注意，這需要每個模組都使用監聽完成視覺化，也就是 $.vmodel.get() 第三個參數\r\n     * \r\n     * @param   array | function     end_p1       監聽指定要完成的倉儲名稱陣列 | 回調方法\r\n     * @param   function             end_p2       回調方法, 並夾帶已經完成的倉儲物件\r\n     */\r\n    $.vmodel.end = function (end_p1, end_p2){\r\n\r\n        var local = this;\r\n\r\n        var issuccess = true;\r\n\r\n        /**\r\n         * 組合成一個陣列回傳參數\r\n         * @param   end_p1 \r\n         * @param   end_p2 \r\n         * @return  [要監聽的倉儲物件, callback()]\r\n         */\r\n        this.param_match = function(end_p1, end_p2) {\r\n            var returnary = [];\r\n\r\n            // 只有一個參數，就取得所有倉儲\r\n            if ($.type(end_p1) == \"function\") {\r\n                var storage = $.vmodel.get();\r\n                returnary = [storage, end_p1];\r\n            }\r\n            // 兩個參數，代表有指定要取得的倉儲\r\n            else {\r\n\r\n                var obj = {};\r\n                $.each(end_p1, function(key, name) {\r\n                    obj[name] = $.vmodel.get(name);\r\n                });\r\n                returnary = [obj, end_p2];\r\n            }\r\n\r\n            return returnary;\r\n        }\r\n\r\n        //命名方便使用\r\n        var pary     = local.param_match(end_p1, end_p2);\r\n        var storage  = pary[0];\r\n        var callback = pary[1];\r\n        end_p1 = end_p2 = null;\r\n\r\n        var id = setInterval(function (){\r\n\r\n            var iscallback = true;\r\n\r\n            // 檢查每個倉儲的視覺化狀態\r\n            $.each(storage, function (storage_name, obj){\r\n\r\n                var history = $.vmodel.history(obj.vname);\r\n\r\n                // false 代表還沒有完成，那就檢查下一個倉儲，且不觸發 callback\r\n                if (history == false) {\r\n                    iscallback = false;\r\n                    return true;\r\n                }\r\n\r\n                iscallback = true;\r\n            });\r\n\r\n\r\n            if (iscallback) {\r\n                callback(storage);\r\n                clearInterval(id);\r\n            }\r\n\r\n\r\n        }, 0);\r\n        \r\n    }\r\n\r\n\r\n    /**\r\n     * 取得視覺化屬性紀錄\r\n     * @param   model_name         倉儲名稱\r\n     * @return               有找到會返回視覺化的屬性物件；反之為 false\r\n     */\r\n    $.vmodel.history = function (model_name) {\r\n\r\n        var returnval = false;\r\n\r\n        // 找到綁在跟目錄的視覺化屬性\r\n        var storage   = $.vmodel.get(model_name);\r\n        var json      = storage.root.attr(\"data-vmodel-history\");\r\n        if (!json) return false;\r\n        var obj       = $.parseJSON(json);\r\n\r\n        // 搜尋\r\n        $.each(obj, function (key, info){\r\n            if (info.vname != model_name) return true;\r\n            returnval = info;\r\n            return false;\r\n        });\r\n\r\n        return returnval;\r\n    }\r\n\r\n\r\n    /**\r\n     * 取得倉儲\r\n     * @param   string            model_name    (選) 倉儲的存放名稱。當為空時，返回所有倉儲\r\n     * @param   bool              p_2     (選) 預設 false, 是否觸發倉儲 autoload\r\n     * @param   function | bool   p_3     (選) 是否啟用監聽並添加視覺化屬性。\r\n     *                                         注意，這是非同步。\r\n     *                                         function :   監聽直到完成模組後會觸發 callback，並夾帶了該倉儲。\r\n     *                                         true :       true 僅啟用監聽。\r\n     *                                         \r\n     * @return  object\r\n     */\r\n    $.vmodel.get = function (model_name, p_2, p_3){\r\n\r\n        var local = this;\r\n\r\n        // 判斷是否可以觸發回調 callback，\r\n        // 條件式當所有狀態都是 true\r\n        this.chk_trigger_callback = function (obj){\r\n\r\n            var allow = true;\r\n\r\n            $.each(obj.fun_struct, function(index, bool) {\r\n\r\n                // 如果遇到沒有初始化的，就終止檢查\r\n                if (bool == false) {\r\n                    allow = false;\r\n                    return false;\r\n                }\r\n\r\n            });\r\n\r\n            // 如果不允許就離開\r\n            // 若 autoload 中的方法都已經建構完成，那就可以呼叫回調 \r\n            return (allow == false) ? false : true;\r\n        }\r\n\r\n\r\n        // 視覺化屬性\r\n        this.display_attr = function (model_name, target_obj){\r\n\r\n            var d = new Date();\r\n\r\n            // 建立一個物件\r\n            var data = [{\r\n                vname: model_name, // 倉儲名稱\r\n                status: true, // 完成\r\n                timestamp : Date.parse(d) + \".\" + d.getMilliseconds(), //時間戳記\r\n            }];\r\n\r\n\r\n            // 視覺狀態是否存在, 若存在代表已經有倉儲也是綁定在這個元素，而且已完成。\r\n            // 這時候就合併已存在的，與新的。\r\n            var attr = target_obj.root.attr(\"data-vmodel-history\");\r\n            if (attr) {\r\n                var dej = $.parseJSON(attr);\r\n                dej.push(data[0]); // 務必使用 data[0] 剝除外面的陣列。\r\n                data = dej;\r\n            }\r\n\r\n\r\n            //視覺狀態\r\n            var encode = JSON.stringify(data);\r\n            target_obj.root.attr(\"data-vmodel-history\", encode); \r\n        }\r\n\r\n        // 僅做對應參數的輔助\r\n        this.param_match = function (model_name, p_2, p_3) {\r\n            var returnary = [];\r\n            var type_name = $.type(model_name);\r\n\r\n            // 返回所有倉儲\r\n            if (!model_name) {\r\n                returnary = [model_name, null, null];\r\n            }\r\n            // 指定一個倉儲名稱\r\n            else if (type_name == \"string\") {\r\n                returnary = [model_name, p_2, p_3];\r\n            }\r\n\r\n            return returnary;\r\n        }\r\n\r\n        // 重新命名\r\n        var pary     = local.param_match(model_name, p_2, p_3);\r\n        var model_name     = pary[0];\r\n        var autoload = pary[1];\r\n        var listen   = pary[2];\r\n        pary = p_2 = p_3 = null;\r\n\r\n\r\n        // 返回所有倉儲\r\n        if (!model_name) {\r\n            return $.vmodel.api.obj_sort(storage);\r\n        }\r\n\r\n        var target_obj = storage[model_name];\r\n        \r\n        // 呼叫的倉儲並不存在\r\n        if (!target_obj) {\r\n            console.log(\"呼叫的倉儲名稱 \"+ model_name +\" 不存在。\");\r\n            return false;\r\n        }\r\n\r\n        // 若參數2指定 bool 且為 true 的時候，會前往判斷，是否要觸發剛取得模組的 autoload()，若有就會優先觸發\r\n        if ($.type(autoload) == \"boolean\" && autoload == true) {\r\n\r\n            // 觸發 autoload()\r\n            var fnameary = $.vmodel.api.get_autoload_funame(target_obj);\r\n            var result   = $.vmodel.api.is_trigger_autoload(target_obj, fnameary);\r\n            // console.log(result); // for debugs\r\n\r\n            // 若有啟用監聽或回調函數\r\n            var type_listen = $.type(listen);\r\n            if (type_listen == \"function\" || (type_listen == \"boolean\" && listen == true)) {\r\n\r\n                // 若是回調\r\n                if (type_listen == \"function\") {\r\n                    // 必須先擴充到該模組底下，並勉多個倉儲會互相干擾\r\n                    target_obj.vmodel_get_callback = function (){\r\n                        listen(target_obj);\r\n                    }\r\n                }\r\n\r\n\r\n                //監聽\r\n                var iid = setInterval(function (){\r\n\r\n                    // 若全部狀態都完成\r\n                    if (local.chk_trigger_callback(target_obj) == true) {\r\n                        clearInterval(iid);\r\n\r\n                        // 視覺化添加屬性\r\n                        local.display_attr(model_name, target_obj);\r\n\r\n                        // 觸發回調\r\n                        if (type_listen == \"boolean\") return true;\r\n                        target_obj.vmodel_get_callback();\r\n                    }\r\n\r\n                }, 20);\r\n\r\n                return true\r\n            }\r\n        }\r\n\r\n        // 無論是否觸發使用者的 autoload(), 最後都會返回該實體化的物件\r\n        return storage[model_name];\r\n    }\r\n\r\n    /**\r\n     * 刪除指定的倉儲\r\n     * @param   model_name (選)倉儲名稱, 不指定會清空所有倉儲\r\n     */\r\n    $.vmodel.delete = function (model_name){\r\n        \r\n        if (!model_name && model_name != '') {\r\n            storage = {};\r\n        } else {\r\n            if (storage[model_name]) {\r\n                delete storage[model_name];\r\n            }\r\n        }\r\n        \r\n        return this;\r\n    }\r\n\r\n    $.vmodel.create = function (param){\r\n        \r\n        // 內部\r\n        var local   = this;\r\n\r\n        // 選擇器\r\n        var selector = param.selector;\r\n        \r\n        /**\r\n         * 錯誤訊息\r\n         * @param   method_name 提示錯誤的 function 名稱\r\n         * @param   msg         錯誤訊息    \r\n         */\r\n        this.msg_error = function (method_name, msg){\r\n\r\n            console.log(\"錯誤：『\" + selector + \"』呼叫的 function 『\" + method_name + \"』：\" + msg);\r\n        \r\n        }\r\n\r\n\r\n        // 初始化使用者指定的 autoload 每個方法的建構狀態\r\n        this.define_autoload_struct = function (obj, autoload_func){\r\n            // 為每一個方法，都設定為 false，代表該方法還沒有建構完成\r\n            $.each(autoload_func, function(index, fun_name) {\r\n                obj.fun_struct[fun_name] = false;\r\n            });\r\n        }\r\n\r\n        // 外部擴充方法\r\n        this.ext_expend = function (obj, model_name){\r\n            var vname = (model_name != null) ? model_name : null;\r\n            $.extend(obj, {\r\n\r\n                vname : vname,\r\n\r\n                // 根選擇器\r\n                selector : selector,        \r\n\r\n                // 根選擇器物件    \r\n                root : $(selector),\r\n\r\n                // 在倉儲中建立一個 fun_struct 物件\r\n                // 用來存放每個 autoload 的方法名稱，\r\n                // 並預設建構狀態為 false, 等到使用者手動為 true，\r\n                // 才代表這個方法完成建構。\r\n                fun_struct : {},\r\n\r\n                /**\r\n                 * 提供外部指定倉儲的模組化狀態。\r\n                 * @param   model_name   autoload 指定的陣列倉儲名稱。可以是單一名稱會陣列。\r\n                 *                 如 \"say\" 或 ['say', 'hello']\r\n                 * @param   bool   (選) true:(預設)完成 | false : 未完成\r\n                 */\r\n                struct : function (model_name, status) {\r\n\r\n                    if ($.type(status) != \"boolean\" && !status) {\r\n                        status = true;\r\n                    }\r\n\r\n\r\n                    // 若使用字串\r\n                    if ($.type(model_name) == \"string\") {\r\n                        if ($.type(obj.fun_struct[model_name]) != \"boolean\") {\r\n                            console.log('找不到名稱為 ' + model_name + '的建構狀態');\r\n                            return false;\r\n                        }\r\n\r\n                        // 設定指定狀態\r\n                        obj.fun_struct[model_name] = status;\r\n                    }\r\n\r\n                    // 若是陣列如 ['say', 'hello']\r\n                    else if ($.type(model_name) == \"array\"){\r\n                        $.each(model_name, function (key, val){\r\n                            obj.fun_struct[val] = status;\r\n                        })\r\n                    }\r\n                    else {\r\n                        console.log('建構名稱須要指定');\r\n                        return false;\r\n                    }\r\n\r\n                    return true;\r\n                }\r\n            });\r\n            return obj;\r\n        }\r\n\r\n        // 放入倉儲\r\n        this.put_storage = function (model_name, realobj){\r\n\r\n            if (model_name != null) {\r\n\r\n                // 檢查是否已存在\r\n                if (!storage[model_name]) {\r\n                    storage[model_name] = realobj;\r\n                }\r\n                else {\r\n                    console.log(\"倉儲名稱『\" + model_name + \"』重複。\");\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.main = function (param){\r\n\r\n            try {\r\n\r\n                // 判斷 jQ 版本是否允許\r\n                if (!$.vmodel.api.isallow_jqver(false)) throw ($.vmodel.api.isallow_jqver(true));\r\n\r\n                // 確認必填參數\r\n                $.vmodel.api.check_input_param({\r\n                    selector : param.selector, \r\n                    model_name : param.model, \r\n                    isautoload : param.isautoload, \r\n                    method : param.method\r\n                });\r\n\r\n                // 參數對應\r\n                var pary       = $.vmodel.api.vmodel_param_match(param.selector, param.model, param.isautoload, param.method);\r\n                var selector   = pary[0];\r\n                var model_name = pary[1]; \r\n                var isautoload = pary[2]; \r\n                var realobj    = pary[3];\r\n\r\n                // 擴充，外部不可使用這些關鍵字\r\n                var realobj    = local.ext_expend(realobj, model_name);\r\n                \r\n                // 取得 autoload 的方法陣列\r\n                var fnameary = $.vmodel.api.get_autoload_funame(realobj);\r\n                \r\n\r\n                // 先定義建構狀態\r\n                local.define_autoload_struct(realobj, fnameary);\r\n\r\n                // 放入倉儲\r\n                local.put_storage(model_name, realobj);\r\n\r\n                // 最後才觸發 autoload 。\r\n                // 這是因為當前的物件，才能被任何倉儲裡的方法取得。\r\n                // 例如自己呼叫自己。\r\n                if (isautoload === true) {\r\n                    var result = $.vmodel.api.is_trigger_autoload(realobj, fnameary);\r\n                    if (result === false) local.msg_error(\"is_trigger_autoload\", \"發生錯誤\");\r\n                }\r\n                \r\n                return this;\r\n            }\r\n            catch(err) {\r\n                console.log(err);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // 返回實體化的，可供外部調用\r\n        return local.main(param);\r\n    }\r\n\r\n\r\n\r\n    $.fn.vmodel = function (p_1, p_2, p_3, p_4){\r\n\r\n        var local   = this;\r\n\r\n        this.main = function (p_1, p_2, p_3, p_4){\r\n\r\n            try {\r\n\r\n                // 判斷 jQ 版本是否允許\r\n                if (!$.vmodel.api.isallow_jqver(false)) throw ($.vmodel.api.isallow_jqver(true));\r\n\r\n                // 確認必填參數\r\n                $.vmodel.api.check_input_param({\r\n                    selector : p_1, \r\n                    model_name : p_2, \r\n                    isautoload : p_3, \r\n                    method : p_4\r\n                });\r\n\r\n                // 參數對應\r\n                var pary       = $.vmodel.api.vmodel_param_match(p_1, p_2, p_3, p_4);\r\n                var selector   = pary[0];\r\n                var model_name = pary[1]; \r\n                var isautoload = pary[2]; \r\n                var method     = pary[3];\r\n\r\n                return $.vmodel.create({\r\n                    selector: selector,\r\n                    model: '--' + model_name,\r\n                    isautoload: isautoload,\r\n                    method: method\r\n                });\r\n            }\r\n            catch(err) {\r\n                console.log(err);\r\n                return false;\r\n            }\r\n\r\n        }\r\n\r\n\r\n        return local.main(p_1, p_2, p_3, p_4);\r\n\r\n    }\r\n\r\n\r\n}( jQuery ));"]}